structure A = Absyn

%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE
  | UMINUS

%nonterm
    program of A.exp
  | exp of A.exp
  | lvalue of A.var
  | lvalue_not_id of A.var
  | optional_exp of A.exp
  | comma_exps of A.exp list
  | comma_exps_nonempty of A.exp list
  | comma_records of (A.symbol * A.exp * A.pos) list
  | comma_records_nonempty of (A.symbol * A.exp * A.pos) list
  | semi_exps of (A.exp * A.pos) list
  | arith_exp of A.exp
  | bool_exp of A.exp
  | comp_exp of A.exp
  | decs of A.dec list
  | dec of A.dec
  | tydec of {name: A.symbol, ty: A.ty, pos: pos}
  | vardec of A.dec
  | fundec of A.fundec
  | tydeclist of {name: A.symbol, ty: A.ty, pos: pos} list
  | fundeclist of A.fundec list
  | ty of A.ty
  | tyfield of A.field
  | tyfields of A.field list
  | tyfields_nonempty of A.field list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%left THEN
%left DO OF ELSE
%nonassoc ASSIGN
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
  DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program : exp           (exp)

exp
  : NIL                 (A.NilExp)
  | ID                  (A.VarExp (A.SimpleVar (Symbol.symbol ID, IDleft)))
  | INT                 (A.IntExp INT)
  | STRING              (A.StringExp (STRING, STRINGleft))
  | MINUS exp           %prec UMINUS (A.OpExp {left = A.IntExp 0, oper = A.MinusOp, right = exp, pos = MINUSleft})
  | arith_exp           (arith_exp)
  | bool_exp            (bool_exp)
  | comp_exp            (comp_exp)
  | LPAREN semi_exps RPAREN          (A.SeqExp semi_exps)   (* exp_sequence *)
  | ID LPAREN comma_exps RPAREN      (A.CallExp {func= Symbol.symbol ID, args = comma_exps, pos = IDleft})  (* call_exp *)
  | ID LBRACE comma_records RBRACE   (A.RecordExp {fields = comma_records, typ = Symbol.symbol ID, pos = IDleft})  (* record_creation *)
  | ID LBRACK exp RBRACK OF exp      (A.ArrayExp {typ = Symbol.symbol ID, size = exp1, init = exp2, pos =IDleft})  (* array_creation *)
  | lvalue_not_id                    (A.VarExp lvalue_not_id)
  | lvalue ASSIGN exp                (A.AssignExp {var = lvalue, exp = exp, pos = lvalueleft})
  | IF exp THEN exp ELSE exp         (A.IfExp {test = exp1, then' = exp2, else' = SOME(exp3), pos = exp1left})
  | IF exp THEN exp                  (A.IfExp {test = exp1, then' = exp2, else' = NONE, pos = exp1left})
  | WHILE exp DO exp                 (A.WhileExp {test = exp1, body = exp2, pos = WHILEleft})
  | FOR ID ASSIGN exp TO exp DO exp  (A.ForExp {var = Symbol.symbol ID, escape = ref true, lo = exp1, hi = exp2, body = exp3, pos = FORleft})
  | LET decs IN optional_exp END     (A.LetExp {decs = decs, body = optional_exp, pos = LETleft})
  | LPAREN optional_exp RPAREN       (optional_exp)
  | BREAK                (A.BreakExp BREAKleft)

lvalue
  : ID                   (A.SimpleVar (Symbol.symbol ID, IDleft))
  | lvalue_not_id        (lvalue_not_id)

lvalue_not_id
  : lvalue DOT ID        (A.FieldVar (lvalue, Symbol.symbol ID, IDright))
  | ID LBRACK exp RBRACK                (A.SubscriptVar (A.SimpleVar (Symbol.symbol ID, IDleft), exp, RBRACKright))
  | lvalue_not_id LBRACK exp RBRACK     (A.SubscriptVar (lvalue_not_id, exp, RBRACKright))

optional_exp
  :                      (A.SeqExp [])
  | exp                  (exp)

comma_exps
  :                      ([])
  | comma_exps_nonempty  (comma_exps_nonempty)

comma_exps_nonempty
  : exp                  ([exp])
  | comma_exps_nonempty COMMA exp    (comma_exps_nonempty @ [exp])

comma_records
  :                      ([])
  | comma_records_nonempty           (comma_records_nonempty)

comma_records_nonempty
  : ID EQ exp            ([(Symbol.symbol ID, exp, IDleft)])
  | comma_records_nonempty COMMA ID EQ exp    (comma_records_nonempty @ [(Symbol.symbol ID, exp, IDleft)])

semi_exps
  : exp                  ([(exp, expleft)])
  | semi_exps SEMICOLON exp          (semi_exps @ [(exp, expleft)])

arith_exp
  : exp PLUS exp         (A.OpExp {left = exp1, oper = A.PlusOp, right = exp2, pos = exp1left})
  | exp MINUS exp        (A.OpExp {left = exp1, oper = A.MinusOp, right = exp2, pos = exp1left})
  | exp TIMES exp        (A.OpExp {left = exp1, oper = A.TimesOp, right = exp2, pos = exp1left})
  | exp DIVIDE exp       (A.OpExp {left = exp1, oper = A.DivideOp, right = exp2, pos = exp1left})

bool_exp
  : exp AND exp          (A.IfExp {test = exp1, then' = exp2, else' = SOME(A.IntExp 0), pos = exp1left})
  | exp OR exp           (A.IfExp {test = exp1, then' = (A.IntExp 1), else' = SOME(exp2), pos = exp1left})

comp_exp
  : exp EQ exp           (A.OpExp {left = exp1, oper = A.EqOp, right = exp2, pos = exp1left})
  | exp NEQ exp          (A.OpExp {left = exp1, oper = A.NeqOp, right = exp2, pos = exp1left})
  | exp LT exp           (A.OpExp {left = exp1, oper = A.LtOp, right = exp2, pos = exp1left})
  | exp LE exp           (A.OpExp {left = exp1, oper = A.LeOp, right = exp2, pos = exp1left})
  | exp GT exp           (A.OpExp {left = exp1, oper = A.GtOp, right = exp2, pos = exp1left})
  | exp GE exp           (A.OpExp {left = exp1, oper = A.GeOp, right = exp2, pos = exp1left})

decs
  :                      ([])
  | decs dec             (decs @ [dec])

dec
  : tydeclist            (A.TypeDec tydeclist)
  | vardec               (vardec)
  | fundeclist           (A.FunctionDec fundeclist)

tydeclist
  : tydec                ([tydec])
  | tydeclist tydec      (tydeclist @ [tydec])

fundeclist
  : fundec               ([fundec])
  | fundeclist fundec    (fundeclist @ [fundec])

tydec : TYPE ID EQ ty    ({name = Symbol.symbol ID, ty = ty, pos = TYPEleft})

vardec
  : VAR ID ASSIGN exp                (A.VarDec{name = Symbol.symbol ID, escape = ref true, typ = NONE, init = exp, pos = VARleft})
  | VAR ID COLON ID ASSIGN exp       (A.VarDec{name = Symbol.symbol ID1, escape = ref true, typ = SOME(Symbol.symbol ID2, ID2left), init = exp, pos = VARleft})

fundec
  : FUNCTION ID LPAREN tyfields RPAREN EQ exp           ({name = Symbol.symbol ID, params = tyfields, result = NONE, body = exp, pos = FUNCTIONleft})
  | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp  ({name = Symbol.symbol ID1, params = tyfields, result = SOME(Symbol.symbol ID2, ID2left), body = exp, pos = FUNCTIONleft})

ty
  : ID                  (A.NameTy (Symbol.symbol ID, IDleft))
  | LBRACE tyfields RBRACE           (A.RecordTy tyfields)
  | ARRAY OF ID         (A.ArrayTy (Symbol.symbol ID, IDleft))

tyfield : ID COLON ID   ({name = Symbol.symbol ID1, typ = Symbol.symbol ID2, escape = ref true, pos = ID1left})

tyfields
  :                     ([])
  | tyfields_nonempty   (tyfields_nonempty)

tyfields_nonempty
  : tyfield             ([tyfield])
  | tyfields COMMA tyfield                (tyfields @ [tyfield])
