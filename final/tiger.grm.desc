1 reduce/reduce conflict
2 shift/reduce conflicts

error:  state 40: reduce/reduce conflict between rule 37 and rule 28 on RPAREN
error:  state 59: shift/reduce conflict (shift FUNCTION, reduce by rule 55)
error:  state 60: shift/reduce conflict (shift TYPE, reduce by rule 53)

state 0:

	program : . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	program	goto 145
	exp	goto 6
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 1:

	exp : comp_exp .  (reduce by rule 8)



	.	reduce by rule 8


state 2:

	exp : bool_exp .  (reduce by rule 7)



	.	reduce by rule 7


state 3:

	exp : arith_exp .  (reduce by rule 6)



	.	reduce by rule 6


state 4:

	exp : lvalue_not_id .  (reduce by rule 13)
	lvalue : lvalue_not_id .  (reduce by rule 23)
	lvalue_not_id : lvalue_not_id . LBRACK exp RBRACK 

	EOF	reduce by rule 13
	COMMA	reduce by rule 13
	SEMICOLON	reduce by rule 13
	RPAREN	reduce by rule 13
	LBRACK	shift 18
	RBRACK	reduce by rule 13
	RBRACE	reduce by rule 13
	DOT	reduce by rule 23
	PLUS	reduce by rule 13
	MINUS	reduce by rule 13
	TIMES	reduce by rule 13
	DIVIDE	reduce by rule 13
	EQ	reduce by rule 13
	NEQ	reduce by rule 13
	LT	reduce by rule 13
	LE	reduce by rule 13
	GT	reduce by rule 13
	GE	reduce by rule 13
	AND	reduce by rule 13
	OR	reduce by rule 13
	ASSIGN	reduce by rule 23
	THEN	reduce by rule 13
	ELSE	reduce by rule 13
	TO	reduce by rule 13
	DO	reduce by rule 13
	IN	reduce by rule 13
	END	reduce by rule 13
	FUNCTION	reduce by rule 13
	VAR	reduce by rule 13
	TYPE	reduce by rule 13


	.	error


state 5:

	exp : lvalue . ASSIGN exp 
	lvalue_not_id : lvalue . DOT ID 

	DOT	shift 20
	ASSIGN	shift 19


	.	error


state 6:

	program : exp .  (reduce by rule 0)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	reduce by rule 0


state 7:

	exp : NIL .  (reduce by rule 1)



	.	reduce by rule 1


state 8:

	exp : BREAK .  (reduce by rule 21)



	.	reduce by rule 21


state 9:

	exp : LET . decs IN optional_exp END 


	decs	goto 33

	.	reduce by rule 51


state 10:

	exp : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 34


	.	error


state 11:

	exp : WHILE . exp DO exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 35
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 12:

	exp : IF . exp THEN exp ELSE exp 
	exp : IF . exp THEN exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 36
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 13:

	exp : MINUS . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 37
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 14:

	exp : LPAREN . semi_exps RPAREN 
	exp : LPAREN . optional_exp RPAREN 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 40
	lvalue	goto 5
	lvalue_not_id	goto 4
	optional_exp	goto 39
	semi_exps	goto 38
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	reduce by rule 27


state 15:

	exp : STRING .  (reduce by rule 4)



	.	reduce by rule 4


state 16:

	exp : INT .  (reduce by rule 3)



	.	reduce by rule 3


state 17:

	exp : ID .  (reduce by rule 2)
	exp : ID . LPAREN comma_exps RPAREN 
	exp : ID . LBRACE comma_records RBRACE 
	exp : ID . LBRACK exp RBRACK OF exp 
	lvalue : ID .  (reduce by rule 22)
	lvalue_not_id : ID . LBRACK exp RBRACK 

	EOF	reduce by rule 2
	COMMA	reduce by rule 2
	SEMICOLON	reduce by rule 2
	LPAREN	shift 43
	RPAREN	reduce by rule 2
	LBRACK	shift 42
	RBRACK	reduce by rule 2
	LBRACE	shift 41
	RBRACE	reduce by rule 2
	DOT	reduce by rule 22
	PLUS	reduce by rule 2
	MINUS	reduce by rule 2
	TIMES	reduce by rule 2
	DIVIDE	reduce by rule 2
	EQ	reduce by rule 2
	NEQ	reduce by rule 2
	LT	reduce by rule 2
	LE	reduce by rule 2
	GT	reduce by rule 2
	GE	reduce by rule 2
	AND	reduce by rule 2
	OR	reduce by rule 2
	ASSIGN	reduce by rule 22
	THEN	reduce by rule 2
	ELSE	reduce by rule 2
	TO	reduce by rule 2
	DO	reduce by rule 2
	IN	reduce by rule 2
	END	reduce by rule 2
	FUNCTION	reduce by rule 2
	VAR	reduce by rule 2
	TYPE	reduce by rule 2


	.	error


state 18:

	lvalue_not_id : lvalue_not_id LBRACK . exp RBRACK 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 44
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 19:

	exp : lvalue ASSIGN . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 45
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 20:

	lvalue_not_id : lvalue DOT . ID 

	ID	shift 46


	.	error


state 21:

	bool_exp : exp OR . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 47
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 22:

	bool_exp : exp AND . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 48
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 23:

	comp_exp : exp GE . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 49
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 24:

	comp_exp : exp GT . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 50
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 25:

	comp_exp : exp LE . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 51
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 26:

	comp_exp : exp LT . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 52
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 27:

	comp_exp : exp NEQ . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 53
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 28:

	comp_exp : exp EQ . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 54
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 29:

	arith_exp : exp DIVIDE . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 55
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 30:

	arith_exp : exp TIMES . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 56
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 31:

	arith_exp : exp MINUS . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 57
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 32:

	arith_exp : exp PLUS . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 58
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 33:

	exp : LET decs . IN optional_exp END 
	decs : decs . dec 

	IN	shift 68
	FUNCTION	shift 67
	VAR	shift 66
	TYPE	shift 65

	dec	goto 64
	tydec	goto 63
	vardec	goto 62
	fundec	goto 61
	tydeclist	goto 60
	fundeclist	goto 59

	.	error


state 34:

	exp : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 69


	.	error


state 35:

	exp : WHILE exp . DO exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21
	DO	shift 70


	.	error


state 36:

	exp : IF exp . THEN exp ELSE exp 
	exp : IF exp . THEN exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21
	THEN	shift 71


	.	error


state 37:

	exp : MINUS exp .  (reduce by rule 5)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 



	.	reduce by rule 5


state 38:

	exp : LPAREN semi_exps . RPAREN 
	semi_exps : semi_exps . SEMICOLON exp 

	SEMICOLON	shift 73
	RPAREN	shift 72


	.	error


state 39:

	exp : LPAREN optional_exp . RPAREN 

	RPAREN	shift 74


	.	error

error:  state 40: reduce/reduce conflict between rule 37 and rule 28 on RPAREN

state 40:

	optional_exp : exp .  (reduce by rule 28)
	semi_exps : exp .  (reduce by rule 37)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	SEMICOLON	reduce by rule 37
	RPAREN	reduce by rule 28
	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	error


state 41:

	exp : ID LBRACE . comma_records RBRACE 

	ID	shift 77

	comma_records	goto 76
	comma_records_nonempty	goto 75

	.	reduce by rule 33


state 42:

	exp : ID LBRACK . exp RBRACK OF exp 
	lvalue_not_id : ID LBRACK . exp RBRACK 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 78
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 43:

	exp : ID LPAREN . comma_exps RPAREN 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 81
	lvalue	goto 5
	lvalue_not_id	goto 4
	comma_exps	goto 80
	comma_exps_nonempty	goto 79
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	reduce by rule 29


state 44:

	lvalue_not_id : lvalue_not_id LBRACK exp . RBRACK 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	RBRACK	shift 82
	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	error


state 45:

	exp : lvalue ASSIGN exp .  (reduce by rule 14)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	reduce by rule 14


state 46:

	lvalue_not_id : lvalue DOT ID .  (reduce by rule 24)



	.	reduce by rule 24


state 47:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	bool_exp : exp OR exp .  (reduce by rule 44)
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23


	.	reduce by rule 44


state 48:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp AND exp .  (reduce by rule 43)
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23


	.	reduce by rule 43


state 49:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	comp_exp : exp GE exp .  (reduce by rule 50)

	EOF	reduce by rule 50
	COMMA	reduce by rule 50
	SEMICOLON	reduce by rule 50
	RPAREN	reduce by rule 50
	RBRACK	reduce by rule 50
	RBRACE	reduce by rule 50
	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	AND	reduce by rule 50
	OR	reduce by rule 50
	THEN	reduce by rule 50
	ELSE	reduce by rule 50
	TO	reduce by rule 50
	DO	reduce by rule 50
	IN	reduce by rule 50
	END	reduce by rule 50
	FUNCTION	reduce by rule 50
	VAR	reduce by rule 50
	TYPE	reduce by rule 50


	.	error


state 50:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp GT exp .  (reduce by rule 49)
	comp_exp : exp . GE exp 

	EOF	reduce by rule 49
	COMMA	reduce by rule 49
	SEMICOLON	reduce by rule 49
	RPAREN	reduce by rule 49
	RBRACK	reduce by rule 49
	RBRACE	reduce by rule 49
	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	AND	reduce by rule 49
	OR	reduce by rule 49
	THEN	reduce by rule 49
	ELSE	reduce by rule 49
	TO	reduce by rule 49
	DO	reduce by rule 49
	IN	reduce by rule 49
	END	reduce by rule 49
	FUNCTION	reduce by rule 49
	VAR	reduce by rule 49
	TYPE	reduce by rule 49


	.	error


state 51:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp LE exp .  (reduce by rule 48)
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	EOF	reduce by rule 48
	COMMA	reduce by rule 48
	SEMICOLON	reduce by rule 48
	RPAREN	reduce by rule 48
	RBRACK	reduce by rule 48
	RBRACE	reduce by rule 48
	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	AND	reduce by rule 48
	OR	reduce by rule 48
	THEN	reduce by rule 48
	ELSE	reduce by rule 48
	TO	reduce by rule 48
	DO	reduce by rule 48
	IN	reduce by rule 48
	END	reduce by rule 48
	FUNCTION	reduce by rule 48
	VAR	reduce by rule 48
	TYPE	reduce by rule 48


	.	error


state 52:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp LT exp .  (reduce by rule 47)
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	EOF	reduce by rule 47
	COMMA	reduce by rule 47
	SEMICOLON	reduce by rule 47
	RPAREN	reduce by rule 47
	RBRACK	reduce by rule 47
	RBRACE	reduce by rule 47
	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	AND	reduce by rule 47
	OR	reduce by rule 47
	THEN	reduce by rule 47
	ELSE	reduce by rule 47
	TO	reduce by rule 47
	DO	reduce by rule 47
	IN	reduce by rule 47
	END	reduce by rule 47
	FUNCTION	reduce by rule 47
	VAR	reduce by rule 47
	TYPE	reduce by rule 47


	.	error


state 53:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp NEQ exp .  (reduce by rule 46)
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	EOF	reduce by rule 46
	COMMA	reduce by rule 46
	SEMICOLON	reduce by rule 46
	RPAREN	reduce by rule 46
	RBRACK	reduce by rule 46
	RBRACE	reduce by rule 46
	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	AND	reduce by rule 46
	OR	reduce by rule 46
	THEN	reduce by rule 46
	ELSE	reduce by rule 46
	TO	reduce by rule 46
	DO	reduce by rule 46
	IN	reduce by rule 46
	END	reduce by rule 46
	FUNCTION	reduce by rule 46
	VAR	reduce by rule 46
	TYPE	reduce by rule 46


	.	error


state 54:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp EQ exp .  (reduce by rule 45)
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	EOF	reduce by rule 45
	COMMA	reduce by rule 45
	SEMICOLON	reduce by rule 45
	RPAREN	reduce by rule 45
	RBRACK	reduce by rule 45
	RBRACE	reduce by rule 45
	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	AND	reduce by rule 45
	OR	reduce by rule 45
	THEN	reduce by rule 45
	ELSE	reduce by rule 45
	TO	reduce by rule 45
	DO	reduce by rule 45
	IN	reduce by rule 45
	END	reduce by rule 45
	FUNCTION	reduce by rule 45
	VAR	reduce by rule 45
	TYPE	reduce by rule 45


	.	error


state 55:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	arith_exp : exp DIVIDE exp .  (reduce by rule 42)
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 



	.	reduce by rule 42


state 56:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp TIMES exp .  (reduce by rule 41)
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 



	.	reduce by rule 41


state 57:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp MINUS exp .  (reduce by rule 40)
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	TIMES	shift 30
	DIVIDE	shift 29


	.	reduce by rule 40


state 58:

	arith_exp : exp . PLUS exp 
	arith_exp : exp PLUS exp .  (reduce by rule 39)
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	TIMES	shift 30
	DIVIDE	shift 29


	.	reduce by rule 39

error:  state 59: shift/reduce conflict (shift FUNCTION, reduce by rule 55)

state 59:

	dec : fundeclist .  (reduce by rule 55)
	fundeclist : fundeclist . fundec 

	FUNCTION	shift 67

	fundec	goto 83

	.	reduce by rule 55

error:  state 60: shift/reduce conflict (shift TYPE, reduce by rule 53)

state 60:

	dec : tydeclist .  (reduce by rule 53)
	tydeclist : tydeclist . tydec 

	TYPE	shift 65

	tydec	goto 84

	.	reduce by rule 53


state 61:

	fundeclist : fundec .  (reduce by rule 58)



	.	reduce by rule 58


state 62:

	dec : vardec .  (reduce by rule 54)



	.	reduce by rule 54


state 63:

	tydeclist : tydec .  (reduce by rule 56)



	.	reduce by rule 56


state 64:

	decs : decs dec .  (reduce by rule 52)



	.	reduce by rule 52


state 65:

	tydec : TYPE . ID EQ ty 

	ID	shift 85


	.	error


state 66:

	vardec : VAR . ID ASSIGN exp 
	vardec : VAR . ID COLON ID ASSIGN exp 

	ID	shift 86


	.	error


state 67:

	fundec : FUNCTION . ID LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp 

	ID	shift 87


	.	error


state 68:

	exp : LET decs IN . optional_exp END 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 89
	lvalue	goto 5
	lvalue_not_id	goto 4
	optional_exp	goto 88
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	reduce by rule 27


state 69:

	exp : FOR ID ASSIGN . exp TO exp DO exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 90
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 70:

	exp : WHILE exp DO . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 91
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 71:

	exp : IF exp THEN . exp ELSE exp 
	exp : IF exp THEN . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 92
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 72:

	exp : LPAREN semi_exps RPAREN .  (reduce by rule 9)



	.	reduce by rule 9


state 73:

	semi_exps : semi_exps SEMICOLON . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 93
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 74:

	exp : LPAREN optional_exp RPAREN .  (reduce by rule 20)



	.	reduce by rule 20


state 75:

	comma_records : comma_records_nonempty .  (reduce by rule 34)
	comma_records_nonempty : comma_records_nonempty . COMMA ID EQ exp 

	COMMA	shift 94


	.	reduce by rule 34


state 76:

	exp : ID LBRACE comma_records . RBRACE 

	RBRACE	shift 95


	.	error


state 77:

	comma_records_nonempty : ID . EQ exp 

	EQ	shift 96


	.	error


state 78:

	exp : ID LBRACK exp . RBRACK OF exp 
	lvalue_not_id : ID LBRACK exp . RBRACK 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	RBRACK	shift 97
	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	error


state 79:

	comma_exps : comma_exps_nonempty .  (reduce by rule 30)
	comma_exps_nonempty : comma_exps_nonempty . COMMA exp 

	COMMA	shift 98


	.	reduce by rule 30


state 80:

	exp : ID LPAREN comma_exps . RPAREN 

	RPAREN	shift 99


	.	error


state 81:

	comma_exps_nonempty : exp .  (reduce by rule 31)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	reduce by rule 31


state 82:

	lvalue_not_id : lvalue_not_id LBRACK exp RBRACK .  (reduce by rule 26)



	.	reduce by rule 26


state 83:

	fundeclist : fundeclist fundec .  (reduce by rule 59)



	.	reduce by rule 59


state 84:

	tydeclist : tydeclist tydec .  (reduce by rule 57)



	.	reduce by rule 57


state 85:

	tydec : TYPE ID . EQ ty 

	EQ	shift 100


	.	error


state 86:

	vardec : VAR ID . ASSIGN exp 
	vardec : VAR ID . COLON ID ASSIGN exp 

	COLON	shift 102
	ASSIGN	shift 101


	.	error


state 87:

	fundec : FUNCTION ID . LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp 

	LPAREN	shift 103


	.	error


state 88:

	exp : LET decs IN optional_exp . END 

	END	shift 104


	.	error


state 89:

	optional_exp : exp .  (reduce by rule 28)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	reduce by rule 28


state 90:

	exp : FOR ID ASSIGN exp . TO exp DO exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21
	TO	shift 105


	.	error


state 91:

	exp : WHILE exp DO exp .  (reduce by rule 17)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	reduce by rule 17


state 92:

	exp : IF exp THEN exp . ELSE exp 
	exp : IF exp THEN exp .  (reduce by rule 16)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21
	ELSE	shift 106


	.	reduce by rule 16


state 93:

	semi_exps : semi_exps SEMICOLON exp .  (reduce by rule 38)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	reduce by rule 38


state 94:

	comma_records_nonempty : comma_records_nonempty COMMA . ID EQ exp 

	ID	shift 107


	.	error


state 95:

	exp : ID LBRACE comma_records RBRACE .  (reduce by rule 11)



	.	reduce by rule 11


state 96:

	comma_records_nonempty : ID EQ . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 108
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 97:

	exp : ID LBRACK exp RBRACK . OF exp 
	lvalue_not_id : ID LBRACK exp RBRACK .  (reduce by rule 25)

	OF	shift 109


	.	reduce by rule 25


state 98:

	comma_exps_nonempty : comma_exps_nonempty COMMA . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 110
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 99:

	exp : ID LPAREN comma_exps RPAREN .  (reduce by rule 10)



	.	reduce by rule 10


state 100:

	tydec : TYPE ID EQ . ty 

	ID	shift 114
	LBRACE	shift 113
	ARRAY	shift 112

	ty	goto 111

	.	error


state 101:

	vardec : VAR ID ASSIGN . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 115
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 102:

	vardec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 116


	.	error


state 103:

	fundec : FUNCTION ID LPAREN . tyfields RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp 

	ID	shift 120

	tyfield	goto 119
	tyfields	goto 118
	tyfields_nonempty	goto 117

	.	reduce by rule 69


state 104:

	exp : LET decs IN optional_exp END .  (reduce by rule 19)



	.	reduce by rule 19


state 105:

	exp : FOR ID ASSIGN exp TO . exp DO exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 121
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 106:

	exp : IF exp THEN exp ELSE . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 122
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 107:

	comma_records_nonempty : comma_records_nonempty COMMA ID . EQ exp 

	EQ	shift 123


	.	error


state 108:

	comma_records_nonempty : ID EQ exp .  (reduce by rule 35)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	reduce by rule 35


state 109:

	exp : ID LBRACK exp RBRACK OF . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 124
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 110:

	comma_exps_nonempty : comma_exps_nonempty COMMA exp .  (reduce by rule 32)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	reduce by rule 32


state 111:

	tydec : TYPE ID EQ ty .  (reduce by rule 60)



	.	reduce by rule 60


state 112:

	ty : ARRAY . OF ID 

	OF	shift 125


	.	error


state 113:

	ty : LBRACE . tyfields RBRACE 

	ID	shift 120

	tyfield	goto 119
	tyfields	goto 126
	tyfields_nonempty	goto 117

	.	reduce by rule 69


state 114:

	ty : ID .  (reduce by rule 65)



	.	reduce by rule 65


state 115:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	vardec : VAR ID ASSIGN exp .  (reduce by rule 61)

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	reduce by rule 61


state 116:

	vardec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 127


	.	error


state 117:

	tyfields : tyfields_nonempty .  (reduce by rule 70)



	.	reduce by rule 70


state 118:

	fundec : FUNCTION ID LPAREN tyfields . RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp 
	tyfields_nonempty : tyfields . COMMA tyfield 

	COMMA	shift 129
	RPAREN	shift 128


	.	error


state 119:

	tyfields_nonempty : tyfield .  (reduce by rule 71)



	.	reduce by rule 71


state 120:

	tyfield : ID . COLON ID 

	COLON	shift 130


	.	error


state 121:

	exp : FOR ID ASSIGN exp TO exp . DO exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21
	DO	shift 131


	.	error


state 122:

	exp : IF exp THEN exp ELSE exp .  (reduce by rule 15)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	reduce by rule 15


state 123:

	comma_records_nonempty : comma_records_nonempty COMMA ID EQ . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 132
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 124:

	exp : ID LBRACK exp RBRACK OF exp .  (reduce by rule 12)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	reduce by rule 12


state 125:

	ty : ARRAY OF . ID 

	ID	shift 133


	.	error


state 126:

	ty : LBRACE tyfields . RBRACE 
	tyfields_nonempty : tyfields . COMMA tyfield 

	COMMA	shift 129
	RBRACE	shift 134


	.	error


state 127:

	vardec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 135
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 128:

	fundec : FUNCTION ID LPAREN tyfields RPAREN . EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp 

	COLON	shift 137
	EQ	shift 136


	.	error


state 129:

	tyfields_nonempty : tyfields COMMA . tyfield 

	ID	shift 120

	tyfield	goto 138

	.	error


state 130:

	tyfield : ID COLON . ID 

	ID	shift 139


	.	error


state 131:

	exp : FOR ID ASSIGN exp TO exp DO . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 140
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 132:

	comma_records_nonempty : comma_records_nonempty COMMA ID EQ exp .  (reduce by rule 36)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	reduce by rule 36


state 133:

	ty : ARRAY OF ID .  (reduce by rule 67)



	.	reduce by rule 67


state 134:

	ty : LBRACE tyfields RBRACE .  (reduce by rule 66)



	.	reduce by rule 66


state 135:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	vardec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 62)

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	reduce by rule 62


state 136:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 141
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 137:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp 

	ID	shift 142


	.	error


state 138:

	tyfields_nonempty : tyfields COMMA tyfield .  (reduce by rule 72)



	.	reduce by rule 72


state 139:

	tyfield : ID COLON ID .  (reduce by rule 68)



	.	reduce by rule 68


state 140:

	exp : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 18)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	reduce by rule 18


state 141:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp .  (reduce by rule 63)

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	reduce by rule 63


state 142:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp 

	EQ	shift 143


	.	error


state 143:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp 

	ID	shift 17
	INT	shift 16
	STRING	shift 15
	LPAREN	shift 14
	MINUS	shift 13
	IF	shift 12
	WHILE	shift 11
	FOR	shift 10
	LET	shift 9
	BREAK	shift 8
	NIL	shift 7

	exp	goto 144
	lvalue	goto 5
	lvalue_not_id	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 144:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .  (reduce by rule 64)

	PLUS	shift 32
	MINUS	shift 31
	TIMES	shift 30
	DIVIDE	shift 29
	EQ	shift 28
	NEQ	shift 27
	LT	shift 26
	LE	shift 25
	GT	shift 24
	GE	shift 23
	AND	shift 22
	OR	shift 21


	.	reduce by rule 64


state 145:


	EOF	accept


	.	error

593 of 1114 action table entries left after compaction
247 goto table entries
