1 reduce/reduce conflict
1 shift/reduce conflict

error:  state 16: shift/reduce conflict (shift LBRACK, reduce by rule 21)
error:  state 46: reduce/reduce conflict between rule 34 and rule 25 on RPAREN

state 0:

	program : . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	program	goto 142
	exp	goto 5
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 1:

	exp : comp_exp .  (reduce by rule 8)



	.	reduce by rule 8


state 2:

	exp : bool_exp .  (reduce by rule 7)



	.	reduce by rule 7


state 3:

	exp : arith_exp .  (reduce by rule 6)



	.	reduce by rule 6


state 4:

	exp : lvalue .  (reduce by rule 2)
	exp : lvalue . ASSIGN exp 
	lvalue : lvalue . DOT ID 
	lvalue : lvalue . LBRACK exp RBRACK 

	LBRACK	shift 19
	DOT	shift 18
	ASSIGN	shift 17


	.	reduce by rule 2


state 5:

	program : exp .  (reduce by rule 0)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	reduce by rule 0


state 6:

	exp : NIL .  (reduce by rule 1)



	.	reduce by rule 1


state 7:

	exp : BREAK .  (reduce by rule 20)



	.	reduce by rule 20


state 8:

	exp : LET . decs IN optional_exp END 

	FUNCTION	shift 39
	VAR	shift 38
	TYPE	shift 37

	decs	goto 36
	dec	goto 35
	tydec	goto 34
	vardec	goto 33
	fundec	goto 32

	.	error


state 9:

	exp : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 40


	.	error


state 10:

	exp : WHILE . exp DO exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 41
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 11:

	exp : IF . exp THEN exp ELSE exp 
	exp : IF . exp THEN exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 42
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 12:

	exp : MINUS . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 43
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 13:

	exp : LPAREN . semi_exps RPAREN 
	exp : LPAREN . optional_exp RPAREN 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 46
	lvalue	goto 4
	optional_exp	goto 45
	semi_exps	goto 44
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	reduce by rule 24


state 14:

	exp : STRING .  (reduce by rule 4)



	.	reduce by rule 4


state 15:

	exp : INT .  (reduce by rule 3)



	.	reduce by rule 3

error:  state 16: shift/reduce conflict (shift LBRACK, reduce by rule 21)

state 16:

	exp : ID . LPAREN comma_exps RPAREN 
	exp : ID . LBRACE comma_records RPAREN 
	exp : ID . LBRACK exp RBRACK OF exp 
	lvalue : ID .  (reduce by rule 21)

	LPAREN	shift 49
	LBRACK	shift 48
	LBRACE	shift 47


	.	reduce by rule 21


state 17:

	exp : lvalue ASSIGN . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 50
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 18:

	lvalue : lvalue DOT . ID 

	ID	shift 51


	.	error


state 19:

	lvalue : lvalue LBRACK . exp RBRACK 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 52
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 20:

	bool_exp : exp OR . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 53
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 21:

	bool_exp : exp AND . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 54
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 22:

	comp_exp : exp GE . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 55
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 23:

	comp_exp : exp GT . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 56
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 24:

	comp_exp : exp LE . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 57
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 25:

	comp_exp : exp LT . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 58
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 26:

	comp_exp : exp NEQ . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 59
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 27:

	comp_exp : exp EQ . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 60
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 28:

	arith_exp : exp DIVIDE . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 61
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 29:

	arith_exp : exp TIMES . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 62
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 30:

	arith_exp : exp MINUS . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 63
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 31:

	arith_exp : exp PLUS . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 64
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 32:

	dec : fundec .  (reduce by rule 52)



	.	reduce by rule 52


state 33:

	dec : vardec .  (reduce by rule 51)



	.	reduce by rule 51


state 34:

	dec : tydec .  (reduce by rule 50)



	.	reduce by rule 50


state 35:

	decs : dec .  (reduce by rule 48)



	.	reduce by rule 48


state 36:

	exp : LET decs . IN optional_exp END 
	decs : decs . dec 

	IN	shift 66
	FUNCTION	shift 39
	VAR	shift 38
	TYPE	shift 37

	dec	goto 65
	tydec	goto 34
	vardec	goto 33
	fundec	goto 32

	.	error


state 37:

	tydec : TYPE . ID EQ ty 

	ID	shift 67


	.	error


state 38:

	vardec : VAR . ID ASSIGN exp 
	vardec : VAR . ID COLON ID ASSIGN exp 

	ID	shift 68


	.	error


state 39:

	fundec : FUNCTION . ID LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp 

	ID	shift 69


	.	error


state 40:

	exp : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 70


	.	error


state 41:

	exp : WHILE exp . DO exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20
	DO	shift 71


	.	error


state 42:

	exp : IF exp . THEN exp ELSE exp 
	exp : IF exp . THEN exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20
	THEN	shift 72


	.	error


state 43:

	exp : MINUS exp .  (reduce by rule 5)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 



	.	reduce by rule 5


state 44:

	exp : LPAREN semi_exps . RPAREN 
	semi_exps : semi_exps . SEMICOLON exp 

	SEMICOLON	shift 74
	RPAREN	shift 73


	.	error


state 45:

	exp : LPAREN optional_exp . RPAREN 

	RPAREN	shift 75


	.	error

error:  state 46: reduce/reduce conflict between rule 34 and rule 25 on RPAREN

state 46:

	optional_exp : exp .  (reduce by rule 25)
	semi_exps : exp .  (reduce by rule 34)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	SEMICOLON	reduce by rule 34
	RPAREN	reduce by rule 25
	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	error


state 47:

	exp : ID LBRACE . comma_records RPAREN 

	ID	shift 78

	comma_records	goto 77
	comma_records_nonempty	goto 76

	.	reduce by rule 30


state 48:

	exp : ID LBRACK . exp RBRACK OF exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 79
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 49:

	exp : ID LPAREN . comma_exps RPAREN 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 82
	lvalue	goto 4
	comma_exps	goto 81
	comma_exps_nonempty	goto 80
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	reduce by rule 26


state 50:

	exp : lvalue ASSIGN exp .  (reduce by rule 13)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	reduce by rule 13


state 51:

	lvalue : lvalue DOT ID .  (reduce by rule 22)



	.	reduce by rule 22


state 52:

	lvalue : lvalue LBRACK exp . RBRACK 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	RBRACK	shift 83
	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	error


state 53:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	bool_exp : exp OR exp .  (reduce by rule 41)
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22


	.	reduce by rule 41


state 54:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp AND exp .  (reduce by rule 40)
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22


	.	reduce by rule 40


state 55:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	comp_exp : exp GE exp .  (reduce by rule 47)

	EOF	reduce by rule 47
	COMMA	reduce by rule 47
	SEMICOLON	reduce by rule 47
	RPAREN	reduce by rule 47
	RBRACK	reduce by rule 47
	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	AND	reduce by rule 47
	OR	reduce by rule 47
	THEN	reduce by rule 47
	ELSE	reduce by rule 47
	TO	reduce by rule 47
	DO	reduce by rule 47
	IN	reduce by rule 47
	END	reduce by rule 47
	FUNCTION	reduce by rule 47
	VAR	reduce by rule 47
	TYPE	reduce by rule 47


	.	error


state 56:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp GT exp .  (reduce by rule 46)
	comp_exp : exp . GE exp 

	EOF	reduce by rule 46
	COMMA	reduce by rule 46
	SEMICOLON	reduce by rule 46
	RPAREN	reduce by rule 46
	RBRACK	reduce by rule 46
	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	AND	reduce by rule 46
	OR	reduce by rule 46
	THEN	reduce by rule 46
	ELSE	reduce by rule 46
	TO	reduce by rule 46
	DO	reduce by rule 46
	IN	reduce by rule 46
	END	reduce by rule 46
	FUNCTION	reduce by rule 46
	VAR	reduce by rule 46
	TYPE	reduce by rule 46


	.	error


state 57:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp LE exp .  (reduce by rule 45)
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	EOF	reduce by rule 45
	COMMA	reduce by rule 45
	SEMICOLON	reduce by rule 45
	RPAREN	reduce by rule 45
	RBRACK	reduce by rule 45
	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	AND	reduce by rule 45
	OR	reduce by rule 45
	THEN	reduce by rule 45
	ELSE	reduce by rule 45
	TO	reduce by rule 45
	DO	reduce by rule 45
	IN	reduce by rule 45
	END	reduce by rule 45
	FUNCTION	reduce by rule 45
	VAR	reduce by rule 45
	TYPE	reduce by rule 45


	.	error


state 58:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp LT exp .  (reduce by rule 44)
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	EOF	reduce by rule 44
	COMMA	reduce by rule 44
	SEMICOLON	reduce by rule 44
	RPAREN	reduce by rule 44
	RBRACK	reduce by rule 44
	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	AND	reduce by rule 44
	OR	reduce by rule 44
	THEN	reduce by rule 44
	ELSE	reduce by rule 44
	TO	reduce by rule 44
	DO	reduce by rule 44
	IN	reduce by rule 44
	END	reduce by rule 44
	FUNCTION	reduce by rule 44
	VAR	reduce by rule 44
	TYPE	reduce by rule 44


	.	error


state 59:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp NEQ exp .  (reduce by rule 43)
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	EOF	reduce by rule 43
	COMMA	reduce by rule 43
	SEMICOLON	reduce by rule 43
	RPAREN	reduce by rule 43
	RBRACK	reduce by rule 43
	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	AND	reduce by rule 43
	OR	reduce by rule 43
	THEN	reduce by rule 43
	ELSE	reduce by rule 43
	TO	reduce by rule 43
	DO	reduce by rule 43
	IN	reduce by rule 43
	END	reduce by rule 43
	FUNCTION	reduce by rule 43
	VAR	reduce by rule 43
	TYPE	reduce by rule 43


	.	error


state 60:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp EQ exp .  (reduce by rule 42)
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	EOF	reduce by rule 42
	COMMA	reduce by rule 42
	SEMICOLON	reduce by rule 42
	RPAREN	reduce by rule 42
	RBRACK	reduce by rule 42
	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	AND	reduce by rule 42
	OR	reduce by rule 42
	THEN	reduce by rule 42
	ELSE	reduce by rule 42
	TO	reduce by rule 42
	DO	reduce by rule 42
	IN	reduce by rule 42
	END	reduce by rule 42
	FUNCTION	reduce by rule 42
	VAR	reduce by rule 42
	TYPE	reduce by rule 42


	.	error


state 61:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	arith_exp : exp DIVIDE exp .  (reduce by rule 39)
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 



	.	reduce by rule 39


state 62:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp TIMES exp .  (reduce by rule 38)
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 



	.	reduce by rule 38


state 63:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp MINUS exp .  (reduce by rule 37)
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	TIMES	shift 29
	DIVIDE	shift 28


	.	reduce by rule 37


state 64:

	arith_exp : exp . PLUS exp 
	arith_exp : exp PLUS exp .  (reduce by rule 36)
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	TIMES	shift 29
	DIVIDE	shift 28


	.	reduce by rule 36


state 65:

	decs : decs dec .  (reduce by rule 49)



	.	reduce by rule 49


state 66:

	exp : LET decs IN . optional_exp END 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 85
	lvalue	goto 4
	optional_exp	goto 84
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	reduce by rule 24


state 67:

	tydec : TYPE ID . EQ ty 

	EQ	shift 86


	.	error


state 68:

	vardec : VAR ID . ASSIGN exp 
	vardec : VAR ID . COLON ID ASSIGN exp 

	COLON	shift 88
	ASSIGN	shift 87


	.	error


state 69:

	fundec : FUNCTION ID . LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp 

	LPAREN	shift 89


	.	error


state 70:

	exp : FOR ID ASSIGN . exp TO exp DO exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 90
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 71:

	exp : WHILE exp DO . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 91
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 72:

	exp : IF exp THEN . exp ELSE exp 
	exp : IF exp THEN . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 92
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 73:

	exp : LPAREN semi_exps RPAREN .  (reduce by rule 9)



	.	reduce by rule 9


state 74:

	semi_exps : semi_exps SEMICOLON . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 93
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 75:

	exp : LPAREN optional_exp RPAREN .  (reduce by rule 19)



	.	reduce by rule 19


state 76:

	comma_records : comma_records_nonempty .  (reduce by rule 31)
	comma_records_nonempty : comma_records_nonempty . COMMA ID EQ exp 

	COMMA	shift 94


	.	reduce by rule 31


state 77:

	exp : ID LBRACE comma_records . RPAREN 

	RPAREN	shift 95


	.	error


state 78:

	comma_records_nonempty : ID . EQ exp 

	EQ	shift 96


	.	error


state 79:

	exp : ID LBRACK exp . RBRACK OF exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	RBRACK	shift 97
	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	error


state 80:

	comma_exps : comma_exps_nonempty .  (reduce by rule 27)
	comma_exps_nonempty : comma_exps_nonempty . COMMA exp 

	COMMA	shift 98


	.	reduce by rule 27


state 81:

	exp : ID LPAREN comma_exps . RPAREN 

	RPAREN	shift 99


	.	error


state 82:

	comma_exps_nonempty : exp .  (reduce by rule 28)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	reduce by rule 28


state 83:

	lvalue : lvalue LBRACK exp RBRACK .  (reduce by rule 23)



	.	reduce by rule 23


state 84:

	exp : LET decs IN optional_exp . END 

	END	shift 100


	.	error


state 85:

	optional_exp : exp .  (reduce by rule 25)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	reduce by rule 25


state 86:

	tydec : TYPE ID EQ . ty 

	ID	shift 104
	LBRACE	shift 103
	ARRAY	shift 102

	ty	goto 101

	.	error


state 87:

	vardec : VAR ID ASSIGN . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 105
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 88:

	vardec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 106


	.	error


state 89:

	fundec : FUNCTION ID LPAREN . tyfields RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp 

	ID	shift 109

	tyfields	goto 108
	tyfields_nonempty	goto 107

	.	reduce by rule 61


state 90:

	exp : FOR ID ASSIGN exp . TO exp DO exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20
	TO	shift 110


	.	error


state 91:

	exp : WHILE exp DO exp .  (reduce by rule 16)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	reduce by rule 16


state 92:

	exp : IF exp THEN exp . ELSE exp 
	exp : IF exp THEN exp .  (reduce by rule 15)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20
	ELSE	shift 111


	.	reduce by rule 15


state 93:

	semi_exps : semi_exps SEMICOLON exp .  (reduce by rule 35)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	reduce by rule 35


state 94:

	comma_records_nonempty : comma_records_nonempty COMMA . ID EQ exp 

	ID	shift 112


	.	error


state 95:

	exp : ID LBRACE comma_records RPAREN .  (reduce by rule 11)



	.	reduce by rule 11


state 96:

	comma_records_nonempty : ID EQ . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 113
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 97:

	exp : ID LBRACK exp RBRACK . OF exp 

	OF	shift 114


	.	error


state 98:

	comma_exps_nonempty : comma_exps_nonempty COMMA . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 115
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 99:

	exp : ID LPAREN comma_exps RPAREN .  (reduce by rule 10)



	.	reduce by rule 10


state 100:

	exp : LET decs IN optional_exp END .  (reduce by rule 18)



	.	reduce by rule 18


state 101:

	tydec : TYPE ID EQ ty .  (reduce by rule 53)



	.	reduce by rule 53


state 102:

	ty : ARRAY . OF ID 

	OF	shift 116


	.	error


state 103:

	ty : LBRACE . tyfields RBRACE 

	ID	shift 109

	tyfields	goto 117
	tyfields_nonempty	goto 107

	.	reduce by rule 61


state 104:

	ty : ID .  (reduce by rule 58)



	.	reduce by rule 58


state 105:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	vardec : VAR ID ASSIGN exp .  (reduce by rule 54)

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	reduce by rule 54


state 106:

	vardec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 118


	.	error


state 107:

	tyfields : tyfields_nonempty .  (reduce by rule 62)
	tyfields_nonempty : tyfields_nonempty . COMMA ID COLON ID 

	COMMA	shift 119


	.	reduce by rule 62


state 108:

	fundec : FUNCTION ID LPAREN tyfields . RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp 

	RPAREN	shift 120


	.	error


state 109:

	tyfields_nonempty : ID . COLON ID 

	COLON	shift 121


	.	error


state 110:

	exp : FOR ID ASSIGN exp TO . exp DO exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 122
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 111:

	exp : IF exp THEN exp ELSE . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 123
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 112:

	comma_records_nonempty : comma_records_nonempty COMMA ID . EQ exp 

	EQ	shift 124


	.	error


state 113:

	comma_records_nonempty : ID EQ exp .  (reduce by rule 32)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	reduce by rule 32


state 114:

	exp : ID LBRACK exp RBRACK OF . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 125
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 115:

	comma_exps_nonempty : comma_exps_nonempty COMMA exp .  (reduce by rule 29)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	reduce by rule 29


state 116:

	ty : ARRAY OF . ID 

	ID	shift 126


	.	error


state 117:

	ty : LBRACE tyfields . RBRACE 

	RBRACE	shift 127


	.	error


state 118:

	vardec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 128
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 119:

	tyfields_nonempty : tyfields_nonempty COMMA . ID COLON ID 

	ID	shift 129


	.	error


state 120:

	fundec : FUNCTION ID LPAREN tyfields RPAREN . EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp 

	COLON	shift 131
	EQ	shift 130


	.	error


state 121:

	tyfields_nonempty : ID COLON . ID 

	ID	shift 132


	.	error


state 122:

	exp : FOR ID ASSIGN exp TO exp . DO exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20
	DO	shift 133


	.	error


state 123:

	exp : IF exp THEN exp ELSE exp .  (reduce by rule 14)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	reduce by rule 14


state 124:

	comma_records_nonempty : comma_records_nonempty COMMA ID EQ . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 134
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 125:

	exp : ID LBRACK exp RBRACK OF exp .  (reduce by rule 12)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	reduce by rule 12


state 126:

	ty : ARRAY OF ID .  (reduce by rule 60)



	.	reduce by rule 60


state 127:

	ty : LBRACE tyfields RBRACE .  (reduce by rule 59)



	.	reduce by rule 59


state 128:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	vardec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 55)

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	reduce by rule 55


state 129:

	tyfields_nonempty : tyfields_nonempty COMMA ID . COLON ID 

	COLON	shift 135


	.	error


state 130:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 136
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 131:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp 

	ID	shift 137


	.	error


state 132:

	tyfields_nonempty : ID COLON ID .  (reduce by rule 63)



	.	reduce by rule 63


state 133:

	exp : FOR ID ASSIGN exp TO exp DO . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 138
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 134:

	comma_records_nonempty : comma_records_nonempty COMMA ID EQ exp .  (reduce by rule 33)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	reduce by rule 33


state 135:

	tyfields_nonempty : tyfields_nonempty COMMA ID COLON . ID 

	ID	shift 139


	.	error


state 136:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp .  (reduce by rule 56)

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	reduce by rule 56


state 137:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp 

	EQ	shift 140


	.	error


state 138:

	exp : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 17)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	reduce by rule 17


state 139:

	tyfields_nonempty : tyfields_nonempty COMMA ID COLON ID .  (reduce by rule 64)



	.	reduce by rule 64


state 140:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp 

	ID	shift 16
	INT	shift 15
	STRING	shift 14
	LPAREN	shift 13
	MINUS	shift 12
	IF	shift 11
	WHILE	shift 10
	FOR	shift 9
	LET	shift 8
	BREAK	shift 7
	NIL	shift 6

	exp	goto 141
	lvalue	goto 4
	arith_exp	goto 3
	bool_exp	goto 2
	comp_exp	goto 1

	.	error


state 141:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .  (reduce by rule 57)

	PLUS	shift 31
	MINUS	shift 30
	TIMES	shift 29
	DIVIDE	shift 28
	EQ	shift 27
	NEQ	shift 26
	LT	shift 25
	LE	shift 24
	GT	shift 23
	GE	shift 22
	AND	shift 21
	OR	shift 20


	.	reduce by rule 57


state 142:


	EOF	accept


	.	error

531 of 1049 action table entries left after compaction
207 goto table entries
